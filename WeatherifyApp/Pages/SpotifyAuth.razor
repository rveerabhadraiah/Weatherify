@page "/spotify-auth"
@using Application.Contracts.Infrastructure

@inject IAuthClient AuthClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Connect to Spotify - Weatherify</PageTitle>

<div class="container mt-5">
  @if (IsLoading)
  {
    <div class="d-flex justify-content-center">
      <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  }
  else if (IsAuthorized)
  {
    <div class="alert alert-success">
      <h4>Successfully connected to Spotify!</h4>
      <p>You can now create weather-based playlists.</p>
      <button class="btn btn-primary" @onclick="GoToHome">Go to Weatherify</button>
    </div>
  }
  else
  {
    <div class="card">
      <div class="card-header">
        <h3>Connect to Spotify</h3>
      </div>
      <div class="card-body">
        <p>Connect your Spotify account to generate weather-based playlists.</p>
        <button class="btn btn-success" @onclick="ConnectToSpotify">
          <i class="bi bi-spotify"></i> Connect to Spotify
        </button>
      </div>
    </div>
  }
</div>

@code {
  private bool IsLoading { get; set; } = true;
  private bool IsAuthorized { get; set; } = false;
  private string ErrorMessage { get; set; } = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    // Check if already authorized
    try
    {
      IsAuthorized = await AuthClient.IsAuthorizedAsync();

      // If authorized and this is the auth page, redirect to home
      if (IsAuthorized && NavigationManager.Uri.EndsWith("/spotify-auth"))
      {
        NavigationManager.NavigateTo("/");
        return;
      }
    }
    catch (Exception ex)
    {
      IsAuthorized = false;
      ErrorMessage = ex.Message;
    }

    IsLoading = false;
  }

  private async Task ConnectToSpotify()
  {
    IsLoading = true;

    try
    {
      var authUrl = await AuthClient.GetAuthorizationUrlAsync();
      NavigationManager.NavigateTo(authUrl, forceLoad: true);
    }
    catch (Exception ex)
    {
      await JSRuntime.InvokeVoidAsync("alert", $"Error connecting to Spotify: {ex.Message}");
      IsLoading = false;
    }
  }

  private void GoToHome()
  {
    NavigationManager.NavigateTo("/");
  }
}